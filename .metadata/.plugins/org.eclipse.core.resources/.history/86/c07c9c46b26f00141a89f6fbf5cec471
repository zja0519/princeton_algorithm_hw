
public class SAP {
	// constructor takes a digraph (not necessarily a DAG)
	private Digraph digraph;
	   public SAP(Digraph G) {
		   digraph = new Digraph(G.V());
		   for (int v = 0; v < G.V(); v++) {
	            // reverse so that adjacency list is in same order as original
	            Stack<Integer> reverse = new Stack<Integer>();
	            Iterable<Integer> curNeighbor = G.adj(v);
	            for (int w : G.adj(v)) {
	                reverse.push(w);
	            }
	            for (int w : reverse) {
	                adj[v].add(w);
	            }
	        }
	   }

	   // length of shortest ancestral path between v and w; -1 if no such path
	   public int length(int v, int w) {
		   return 0;
	   }

	   // a common ancestor of v and w that participates in a shortest ancestral path; -1 if no such path
	   public int ancestor(int v, int w) {
		   return 0;
	   }

	   // length of shortest ancestral path between any vertex in v and any vertex in w; -1 if no such path
	   public int length(Iterable<Integer> v, Iterable<Integer> w) {
		   return 0;
	   }

	   // a common ancestor that participates in shortest ancestral path; -1 if no such path
	   public int ancestor(Iterable<Integer> v, Iterable<Integer> w) {
		   return 0;   
	   }

	   // do unit testing of this class
	   public static void main(String[] args) {
		   
	   }
}
